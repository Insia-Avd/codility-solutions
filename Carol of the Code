# Carol of the Code
# https://app.codility.com/programmers/challenges/carol_of_the_code2022/

def solution(A):
    N = len(A)
    def rotate(tile, times):
        t = list(tile)
        for _ in range(times):
            t = [t[3], t[0], t[1], t[2]] 
        return ''.join(t)
    rotations = [[rotate(A[i], r) for r in range(4)] for i in range(N)]
    dp_prev = [min(r, 4 - r) for r in range(4)]
    for i in range(1, N):
        dp_curr = [float('inf')] * 4
        for r1 in range(4):
            right_color = rotations[i-1][r1][1]
            for r2 in range(4):
                left_color = rotations[i][r2][3]
                if right_color == left_color:
                    cost = min(r2, 4 - r2)
                    dp_curr[r2] = min(dp_curr[r2], dp_prev[r1] + cost)
        dp_prev = dp_curr
    return min(dp_prev)
